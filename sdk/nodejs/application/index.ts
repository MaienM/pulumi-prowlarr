// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { ApplicationArgs, ApplicationState } from "./application";
export type Application = import("./application").Application;
export const Application: typeof import("./application").Application = null as any;
utilities.lazyLoad(exports, ["Application"], () => require("./application"));

export { ApplicationLazyLibrarianArgs, ApplicationLazyLibrarianState } from "./applicationLazyLibrarian";
export type ApplicationLazyLibrarian = import("./applicationLazyLibrarian").ApplicationLazyLibrarian;
export const ApplicationLazyLibrarian: typeof import("./applicationLazyLibrarian").ApplicationLazyLibrarian = null as any;
utilities.lazyLoad(exports, ["ApplicationLazyLibrarian"], () => require("./applicationLazyLibrarian"));

export { ApplicationLidarrArgs, ApplicationLidarrState } from "./applicationLidarr";
export type ApplicationLidarr = import("./applicationLidarr").ApplicationLidarr;
export const ApplicationLidarr: typeof import("./applicationLidarr").ApplicationLidarr = null as any;
utilities.lazyLoad(exports, ["ApplicationLidarr"], () => require("./applicationLidarr"));

export { ApplicationMylarArgs, ApplicationMylarState } from "./applicationMylar";
export type ApplicationMylar = import("./applicationMylar").ApplicationMylar;
export const ApplicationMylar: typeof import("./applicationMylar").ApplicationMylar = null as any;
utilities.lazyLoad(exports, ["ApplicationMylar"], () => require("./applicationMylar"));

export { ApplicationRadarrArgs, ApplicationRadarrState } from "./applicationRadarr";
export type ApplicationRadarr = import("./applicationRadarr").ApplicationRadarr;
export const ApplicationRadarr: typeof import("./applicationRadarr").ApplicationRadarr = null as any;
utilities.lazyLoad(exports, ["ApplicationRadarr"], () => require("./applicationRadarr"));

export { ApplicationReadarrArgs, ApplicationReadarrState } from "./applicationReadarr";
export type ApplicationReadarr = import("./applicationReadarr").ApplicationReadarr;
export const ApplicationReadarr: typeof import("./applicationReadarr").ApplicationReadarr = null as any;
utilities.lazyLoad(exports, ["ApplicationReadarr"], () => require("./applicationReadarr"));

export { ApplicationSonarrArgs, ApplicationSonarrState } from "./applicationSonarr";
export type ApplicationSonarr = import("./applicationSonarr").ApplicationSonarr;
export const ApplicationSonarr: typeof import("./applicationSonarr").ApplicationSonarr = null as any;
utilities.lazyLoad(exports, ["ApplicationSonarr"], () => require("./applicationSonarr"));

export { ApplicationWhisparrArgs, ApplicationWhisparrState } from "./applicationWhisparr";
export type ApplicationWhisparr = import("./applicationWhisparr").ApplicationWhisparr;
export const ApplicationWhisparr: typeof import("./applicationWhisparr").ApplicationWhisparr = null as any;
utilities.lazyLoad(exports, ["ApplicationWhisparr"], () => require("./applicationWhisparr"));

export { GetApplicationArgs, GetApplicationResult, GetApplicationOutputArgs } from "./getApplication";
export const getApplication: typeof import("./getApplication").getApplication = null as any;
export const getApplicationOutput: typeof import("./getApplication").getApplicationOutput = null as any;
utilities.lazyLoad(exports, ["getApplication","getApplicationOutput"], () => require("./getApplication"));

export { GetApplicationsResult } from "./getApplications";
export const getApplications: typeof import("./getApplications").getApplications = null as any;
utilities.lazyLoad(exports, ["getApplications"], () => require("./getApplications"));

export { GetSyncProfileArgs, GetSyncProfileResult, GetSyncProfileOutputArgs } from "./getSyncProfile";
export const getSyncProfile: typeof import("./getSyncProfile").getSyncProfile = null as any;
export const getSyncProfileOutput: typeof import("./getSyncProfile").getSyncProfileOutput = null as any;
utilities.lazyLoad(exports, ["getSyncProfile","getSyncProfileOutput"], () => require("./getSyncProfile"));

export { GetSyncProfilesResult } from "./getSyncProfiles";
export const getSyncProfiles: typeof import("./getSyncProfiles").getSyncProfiles = null as any;
utilities.lazyLoad(exports, ["getSyncProfiles"], () => require("./getSyncProfiles"));

export { SyncProfileArgs, SyncProfileState } from "./syncProfile";
export type SyncProfile = import("./syncProfile").SyncProfile;
export const SyncProfile: typeof import("./syncProfile").SyncProfile = null as any;
utilities.lazyLoad(exports, ["SyncProfile"], () => require("./syncProfile"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "prowlarr:Application/application:Application":
                return new Application(name, <any>undefined, { urn })
            case "prowlarr:Application/applicationLazyLibrarian:ApplicationLazyLibrarian":
                return new ApplicationLazyLibrarian(name, <any>undefined, { urn })
            case "prowlarr:Application/applicationLidarr:ApplicationLidarr":
                return new ApplicationLidarr(name, <any>undefined, { urn })
            case "prowlarr:Application/applicationMylar:ApplicationMylar":
                return new ApplicationMylar(name, <any>undefined, { urn })
            case "prowlarr:Application/applicationRadarr:ApplicationRadarr":
                return new ApplicationRadarr(name, <any>undefined, { urn })
            case "prowlarr:Application/applicationReadarr:ApplicationReadarr":
                return new ApplicationReadarr(name, <any>undefined, { urn })
            case "prowlarr:Application/applicationSonarr:ApplicationSonarr":
                return new ApplicationSonarr(name, <any>undefined, { urn })
            case "prowlarr:Application/applicationWhisparr:ApplicationWhisparr":
                return new ApplicationWhisparr(name, <any>undefined, { urn })
            case "prowlarr:Application/syncProfile:SyncProfile":
                return new SyncProfile(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("prowlarr", "Application/application", _module)
pulumi.runtime.registerResourceModule("prowlarr", "Application/applicationLazyLibrarian", _module)
pulumi.runtime.registerResourceModule("prowlarr", "Application/applicationLidarr", _module)
pulumi.runtime.registerResourceModule("prowlarr", "Application/applicationMylar", _module)
pulumi.runtime.registerResourceModule("prowlarr", "Application/applicationRadarr", _module)
pulumi.runtime.registerResourceModule("prowlarr", "Application/applicationReadarr", _module)
pulumi.runtime.registerResourceModule("prowlarr", "Application/applicationSonarr", _module)
pulumi.runtime.registerResourceModule("prowlarr", "Application/applicationWhisparr", _module)
pulumi.runtime.registerResourceModule("prowlarr", "Application/syncProfile", _module)
