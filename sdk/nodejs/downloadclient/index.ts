// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { DownloadClientArgs, DownloadClientState } from "./downloadClient";
export type DownloadClient = import("./downloadClient").DownloadClient;
export const DownloadClient: typeof import("./downloadClient").DownloadClient = null as any;
utilities.lazyLoad(exports, ["DownloadClient"], () => require("./downloadClient"));

export { DownloadClientAria2Args, DownloadClientAria2State } from "./downloadClientAria2";
export type DownloadClientAria2 = import("./downloadClientAria2").DownloadClientAria2;
export const DownloadClientAria2: typeof import("./downloadClientAria2").DownloadClientAria2 = null as any;
utilities.lazyLoad(exports, ["DownloadClientAria2"], () => require("./downloadClientAria2"));

export { DownloadClientDelugeArgs, DownloadClientDelugeState } from "./downloadClientDeluge";
export type DownloadClientDeluge = import("./downloadClientDeluge").DownloadClientDeluge;
export const DownloadClientDeluge: typeof import("./downloadClientDeluge").DownloadClientDeluge = null as any;
utilities.lazyLoad(exports, ["DownloadClientDeluge"], () => require("./downloadClientDeluge"));

export { DownloadClientFloodArgs, DownloadClientFloodState } from "./downloadClientFlood";
export type DownloadClientFlood = import("./downloadClientFlood").DownloadClientFlood;
export const DownloadClientFlood: typeof import("./downloadClientFlood").DownloadClientFlood = null as any;
utilities.lazyLoad(exports, ["DownloadClientFlood"], () => require("./downloadClientFlood"));

export { DownloadClientFreeboxArgs, DownloadClientFreeboxState } from "./downloadClientFreebox";
export type DownloadClientFreebox = import("./downloadClientFreebox").DownloadClientFreebox;
export const DownloadClientFreebox: typeof import("./downloadClientFreebox").DownloadClientFreebox = null as any;
utilities.lazyLoad(exports, ["DownloadClientFreebox"], () => require("./downloadClientFreebox"));

export { DownloadClientHadoukenArgs, DownloadClientHadoukenState } from "./downloadClientHadouken";
export type DownloadClientHadouken = import("./downloadClientHadouken").DownloadClientHadouken;
export const DownloadClientHadouken: typeof import("./downloadClientHadouken").DownloadClientHadouken = null as any;
utilities.lazyLoad(exports, ["DownloadClientHadouken"], () => require("./downloadClientHadouken"));

export { DownloadClientNzbgetArgs, DownloadClientNzbgetState } from "./downloadClientNzbget";
export type DownloadClientNzbget = import("./downloadClientNzbget").DownloadClientNzbget;
export const DownloadClientNzbget: typeof import("./downloadClientNzbget").DownloadClientNzbget = null as any;
utilities.lazyLoad(exports, ["DownloadClientNzbget"], () => require("./downloadClientNzbget"));

export { DownloadClientNzbvortexArgs, DownloadClientNzbvortexState } from "./downloadClientNzbvortex";
export type DownloadClientNzbvortex = import("./downloadClientNzbvortex").DownloadClientNzbvortex;
export const DownloadClientNzbvortex: typeof import("./downloadClientNzbvortex").DownloadClientNzbvortex = null as any;
utilities.lazyLoad(exports, ["DownloadClientNzbvortex"], () => require("./downloadClientNzbvortex"));

export { DownloadClientPneumaticArgs, DownloadClientPneumaticState } from "./downloadClientPneumatic";
export type DownloadClientPneumatic = import("./downloadClientPneumatic").DownloadClientPneumatic;
export const DownloadClientPneumatic: typeof import("./downloadClientPneumatic").DownloadClientPneumatic = null as any;
utilities.lazyLoad(exports, ["DownloadClientPneumatic"], () => require("./downloadClientPneumatic"));

export { DownloadClientQbittorrentArgs, DownloadClientQbittorrentState } from "./downloadClientQbittorrent";
export type DownloadClientQbittorrent = import("./downloadClientQbittorrent").DownloadClientQbittorrent;
export const DownloadClientQbittorrent: typeof import("./downloadClientQbittorrent").DownloadClientQbittorrent = null as any;
utilities.lazyLoad(exports, ["DownloadClientQbittorrent"], () => require("./downloadClientQbittorrent"));

export { DownloadClientRtorrentArgs, DownloadClientRtorrentState } from "./downloadClientRtorrent";
export type DownloadClientRtorrent = import("./downloadClientRtorrent").DownloadClientRtorrent;
export const DownloadClientRtorrent: typeof import("./downloadClientRtorrent").DownloadClientRtorrent = null as any;
utilities.lazyLoad(exports, ["DownloadClientRtorrent"], () => require("./downloadClientRtorrent"));

export { DownloadClientSabnzbdArgs, DownloadClientSabnzbdState } from "./downloadClientSabnzbd";
export type DownloadClientSabnzbd = import("./downloadClientSabnzbd").DownloadClientSabnzbd;
export const DownloadClientSabnzbd: typeof import("./downloadClientSabnzbd").DownloadClientSabnzbd = null as any;
utilities.lazyLoad(exports, ["DownloadClientSabnzbd"], () => require("./downloadClientSabnzbd"));

export { DownloadClientTorrentBlackholeArgs, DownloadClientTorrentBlackholeState } from "./downloadClientTorrentBlackhole";
export type DownloadClientTorrentBlackhole = import("./downloadClientTorrentBlackhole").DownloadClientTorrentBlackhole;
export const DownloadClientTorrentBlackhole: typeof import("./downloadClientTorrentBlackhole").DownloadClientTorrentBlackhole = null as any;
utilities.lazyLoad(exports, ["DownloadClientTorrentBlackhole"], () => require("./downloadClientTorrentBlackhole"));

export { DownloadClientTorrentDownloadStationArgs, DownloadClientTorrentDownloadStationState } from "./downloadClientTorrentDownloadStation";
export type DownloadClientTorrentDownloadStation = import("./downloadClientTorrentDownloadStation").DownloadClientTorrentDownloadStation;
export const DownloadClientTorrentDownloadStation: typeof import("./downloadClientTorrentDownloadStation").DownloadClientTorrentDownloadStation = null as any;
utilities.lazyLoad(exports, ["DownloadClientTorrentDownloadStation"], () => require("./downloadClientTorrentDownloadStation"));

export { DownloadClientTransmissionArgs, DownloadClientTransmissionState } from "./downloadClientTransmission";
export type DownloadClientTransmission = import("./downloadClientTransmission").DownloadClientTransmission;
export const DownloadClientTransmission: typeof import("./downloadClientTransmission").DownloadClientTransmission = null as any;
utilities.lazyLoad(exports, ["DownloadClientTransmission"], () => require("./downloadClientTransmission"));

export { DownloadClientUsenetBlackholeArgs, DownloadClientUsenetBlackholeState } from "./downloadClientUsenetBlackhole";
export type DownloadClientUsenetBlackhole = import("./downloadClientUsenetBlackhole").DownloadClientUsenetBlackhole;
export const DownloadClientUsenetBlackhole: typeof import("./downloadClientUsenetBlackhole").DownloadClientUsenetBlackhole = null as any;
utilities.lazyLoad(exports, ["DownloadClientUsenetBlackhole"], () => require("./downloadClientUsenetBlackhole"));

export { DownloadClientUsenetDownloadStationArgs, DownloadClientUsenetDownloadStationState } from "./downloadClientUsenetDownloadStation";
export type DownloadClientUsenetDownloadStation = import("./downloadClientUsenetDownloadStation").DownloadClientUsenetDownloadStation;
export const DownloadClientUsenetDownloadStation: typeof import("./downloadClientUsenetDownloadStation").DownloadClientUsenetDownloadStation = null as any;
utilities.lazyLoad(exports, ["DownloadClientUsenetDownloadStation"], () => require("./downloadClientUsenetDownloadStation"));

export { DownloadClientUtorrentArgs, DownloadClientUtorrentState } from "./downloadClientUtorrent";
export type DownloadClientUtorrent = import("./downloadClientUtorrent").DownloadClientUtorrent;
export const DownloadClientUtorrent: typeof import("./downloadClientUtorrent").DownloadClientUtorrent = null as any;
utilities.lazyLoad(exports, ["DownloadClientUtorrent"], () => require("./downloadClientUtorrent"));

export { DownloadClientVuzeArgs, DownloadClientVuzeState } from "./downloadClientVuze";
export type DownloadClientVuze = import("./downloadClientVuze").DownloadClientVuze;
export const DownloadClientVuze: typeof import("./downloadClientVuze").DownloadClientVuze = null as any;
utilities.lazyLoad(exports, ["DownloadClientVuze"], () => require("./downloadClientVuze"));

export { GetDownloadClientArgs, GetDownloadClientResult, GetDownloadClientOutputArgs } from "./getDownloadClient";
export const getDownloadClient: typeof import("./getDownloadClient").getDownloadClient = null as any;
export const getDownloadClientOutput: typeof import("./getDownloadClient").getDownloadClientOutput = null as any;
utilities.lazyLoad(exports, ["getDownloadClient","getDownloadClientOutput"], () => require("./getDownloadClient"));

export { GetDownloadClientsResult } from "./getDownloadClients";
export const getDownloadClients: typeof import("./getDownloadClients").getDownloadClients = null as any;
utilities.lazyLoad(exports, ["getDownloadClients"], () => require("./getDownloadClients"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "prowlarr:DownloadClient/downloadClient:DownloadClient":
                return new DownloadClient(name, <any>undefined, { urn })
            case "prowlarr:DownloadClient/downloadClientAria2:DownloadClientAria2":
                return new DownloadClientAria2(name, <any>undefined, { urn })
            case "prowlarr:DownloadClient/downloadClientDeluge:DownloadClientDeluge":
                return new DownloadClientDeluge(name, <any>undefined, { urn })
            case "prowlarr:DownloadClient/downloadClientFlood:DownloadClientFlood":
                return new DownloadClientFlood(name, <any>undefined, { urn })
            case "prowlarr:DownloadClient/downloadClientFreebox:DownloadClientFreebox":
                return new DownloadClientFreebox(name, <any>undefined, { urn })
            case "prowlarr:DownloadClient/downloadClientHadouken:DownloadClientHadouken":
                return new DownloadClientHadouken(name, <any>undefined, { urn })
            case "prowlarr:DownloadClient/downloadClientNzbget:DownloadClientNzbget":
                return new DownloadClientNzbget(name, <any>undefined, { urn })
            case "prowlarr:DownloadClient/downloadClientNzbvortex:DownloadClientNzbvortex":
                return new DownloadClientNzbvortex(name, <any>undefined, { urn })
            case "prowlarr:DownloadClient/downloadClientPneumatic:DownloadClientPneumatic":
                return new DownloadClientPneumatic(name, <any>undefined, { urn })
            case "prowlarr:DownloadClient/downloadClientQbittorrent:DownloadClientQbittorrent":
                return new DownloadClientQbittorrent(name, <any>undefined, { urn })
            case "prowlarr:DownloadClient/downloadClientRtorrent:DownloadClientRtorrent":
                return new DownloadClientRtorrent(name, <any>undefined, { urn })
            case "prowlarr:DownloadClient/downloadClientSabnzbd:DownloadClientSabnzbd":
                return new DownloadClientSabnzbd(name, <any>undefined, { urn })
            case "prowlarr:DownloadClient/downloadClientTorrentBlackhole:DownloadClientTorrentBlackhole":
                return new DownloadClientTorrentBlackhole(name, <any>undefined, { urn })
            case "prowlarr:DownloadClient/downloadClientTorrentDownloadStation:DownloadClientTorrentDownloadStation":
                return new DownloadClientTorrentDownloadStation(name, <any>undefined, { urn })
            case "prowlarr:DownloadClient/downloadClientTransmission:DownloadClientTransmission":
                return new DownloadClientTransmission(name, <any>undefined, { urn })
            case "prowlarr:DownloadClient/downloadClientUsenetBlackhole:DownloadClientUsenetBlackhole":
                return new DownloadClientUsenetBlackhole(name, <any>undefined, { urn })
            case "prowlarr:DownloadClient/downloadClientUsenetDownloadStation:DownloadClientUsenetDownloadStation":
                return new DownloadClientUsenetDownloadStation(name, <any>undefined, { urn })
            case "prowlarr:DownloadClient/downloadClientUtorrent:DownloadClientUtorrent":
                return new DownloadClientUtorrent(name, <any>undefined, { urn })
            case "prowlarr:DownloadClient/downloadClientVuze:DownloadClientVuze":
                return new DownloadClientVuze(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("prowlarr", "DownloadClient/downloadClient", _module)
pulumi.runtime.registerResourceModule("prowlarr", "DownloadClient/downloadClientAria2", _module)
pulumi.runtime.registerResourceModule("prowlarr", "DownloadClient/downloadClientDeluge", _module)
pulumi.runtime.registerResourceModule("prowlarr", "DownloadClient/downloadClientFlood", _module)
pulumi.runtime.registerResourceModule("prowlarr", "DownloadClient/downloadClientFreebox", _module)
pulumi.runtime.registerResourceModule("prowlarr", "DownloadClient/downloadClientHadouken", _module)
pulumi.runtime.registerResourceModule("prowlarr", "DownloadClient/downloadClientNzbget", _module)
pulumi.runtime.registerResourceModule("prowlarr", "DownloadClient/downloadClientNzbvortex", _module)
pulumi.runtime.registerResourceModule("prowlarr", "DownloadClient/downloadClientPneumatic", _module)
pulumi.runtime.registerResourceModule("prowlarr", "DownloadClient/downloadClientQbittorrent", _module)
pulumi.runtime.registerResourceModule("prowlarr", "DownloadClient/downloadClientRtorrent", _module)
pulumi.runtime.registerResourceModule("prowlarr", "DownloadClient/downloadClientSabnzbd", _module)
pulumi.runtime.registerResourceModule("prowlarr", "DownloadClient/downloadClientTorrentBlackhole", _module)
pulumi.runtime.registerResourceModule("prowlarr", "DownloadClient/downloadClientTorrentDownloadStation", _module)
pulumi.runtime.registerResourceModule("prowlarr", "DownloadClient/downloadClientTransmission", _module)
pulumi.runtime.registerResourceModule("prowlarr", "DownloadClient/downloadClientUsenetBlackhole", _module)
pulumi.runtime.registerResourceModule("prowlarr", "DownloadClient/downloadClientUsenetDownloadStation", _module)
pulumi.runtime.registerResourceModule("prowlarr", "DownloadClient/downloadClientUtorrent", _module)
pulumi.runtime.registerResourceModule("prowlarr", "DownloadClient/downloadClientVuze", _module)
