// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * <!-- subcategory:Download Clients -->Generic Download Client resource. When possible use a specific resource instead.
 * For more information refer to [Download Client](https://wiki.servarr.com/prowlarr/settings#download-clients).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as prowlarr from "@maienm/pulumi-prowlarr";
 *
 * const example = new prowlarr.downloadclient.DownloadClient("example", {
 *     configContract: "TransmissionSettings",
 *     enable: true,
 *     host: "transmission",
 *     implementation: "Transmission",
 *     name: "Example",
 *     port: 9091,
 *     priority: 1,
 *     protocol: "torrent",
 *     urlBase: "/transmission/",
 * });
 * ```
 *
 * ## Import
 *
 * import using the API/UI ID
 *
 * ```sh
 *  $ pulumi import prowlarr:DownloadClient/downloadClient:DownloadClient example 1
 * ```
 */
export class DownloadClient extends pulumi.CustomResource {
    /**
     * Get an existing DownloadClient resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DownloadClientState, opts?: pulumi.CustomResourceOptions): DownloadClient {
        return new DownloadClient(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'prowlarr:DownloadClient/downloadClient:DownloadClient';

    /**
     * Returns true if the given object is an instance of DownloadClient.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DownloadClient {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DownloadClient.__pulumiType;
    }

    /**
     * Add paused flag.
     */
    public readonly addPaused!: pulumi.Output<boolean>;
    /**
     * Add stopped flag.
     */
    public readonly addStopped!: pulumi.Output<boolean>;
    /**
     * Additional tags, `0` TitleSlug, `1` Quality, `2` Language, `3` ReleaseGroup, `4` Year, `5` Indexer, `6` Network.
     */
    public readonly additionalTags!: pulumi.Output<number[]>;
    /**
     * API key.
     */
    public readonly apiKey!: pulumi.Output<string>;
    /**
     * API URL.
     */
    public readonly apiUrl!: pulumi.Output<string>;
    /**
     * App ID.
     */
    public readonly appId!: pulumi.Output<string>;
    /**
     * App Token.
     */
    public readonly appToken!: pulumi.Output<string>;
    /**
     * List of mapped categories.
     */
    public readonly categories!: pulumi.Output<outputs.DownloadClient.DownloadClientCategory[]>;
    /**
     * Category.
     */
    public readonly category!: pulumi.Output<string>;
    /**
     * DownloadClient configuration template.
     */
    public readonly configContract!: pulumi.Output<string>;
    /**
     * Destination.
     */
    public readonly destination!: pulumi.Output<string>;
    /**
     * Movie directory.
     */
    public readonly destinationDirectory!: pulumi.Output<string>;
    /**
     * Directory.
     */
    public readonly directory!: pulumi.Output<string>;
    /**
     * Enable flag.
     */
    public readonly enable!: pulumi.Output<boolean>;
    /**
     * Field tags.
     */
    public readonly fieldTags!: pulumi.Output<string[]>;
    /**
     * host.
     */
    public readonly host!: pulumi.Output<string>;
    /**
     * DownloadClient implementation name.
     */
    public readonly implementation!: pulumi.Output<string>;
    /**
     * Initial state. `0` Start, `1` ForceStart, `2` Pause.
     */
    public readonly initialState!: pulumi.Output<number>;
    /**
     * Initial state, with Stop support. `0` Start, `1` ForceStart, `2` Pause, `3` Stop.
     */
    public readonly intialState!: pulumi.Output<number>;
    /**
     * Priority. `0` Last, `1` First.
     */
    public readonly itemPriority!: pulumi.Output<number>;
    /**
     * Magnet file extension.
     */
    public readonly magnetFileExtension!: pulumi.Output<string>;
    /**
     * Download Client name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * NZB folder.
     */
    public readonly nzbFolder!: pulumi.Output<string>;
    /**
     * Password.
     */
    public readonly password!: pulumi.Output<string>;
    /**
     * Port.
     */
    public readonly port!: pulumi.Output<number>;
    /**
     * Post import tags.
     */
    public readonly postImTags!: pulumi.Output<string[]>;
    /**
     * Priority.
     */
    public readonly priority!: pulumi.Output<number>;
    /**
     * Protocol. Valid values are 'usenet' and 'torrent'.
     */
    public readonly protocol!: pulumi.Output<string>;
    /**
     * Read only flag.
     */
    public readonly readOnly!: pulumi.Output<boolean>;
    /**
     * RPC path.
     */
    public readonly rpcPath!: pulumi.Output<string>;
    /**
     * Save magnet files flag.
     */
    public readonly saveMagnetFiles!: pulumi.Output<boolean>;
    /**
     * Secret token.
     */
    public readonly secretToken!: pulumi.Output<string>;
    /**
     * Sequential order flag.
     */
    public readonly sequentialOrder!: pulumi.Output<boolean>;
    /**
     * Start on add flag.
     */
    public readonly startOnAdd!: pulumi.Output<boolean>;
    /**
     * STRM folder.
     */
    public readonly strmFolder!: pulumi.Output<string>;
    /**
     * List of associated tags.
     */
    public readonly tags!: pulumi.Output<number[]>;
    /**
     * Torrent folder.
     */
    public readonly torrentFolder!: pulumi.Output<string>;
    /**
     * TV imported category.
     */
    public readonly tvImportedCategory!: pulumi.Output<string>;
    /**
     * Base URL.
     */
    public readonly urlBase!: pulumi.Output<string>;
    /**
     * Use SSL flag.
     */
    public readonly useSsl!: pulumi.Output<boolean>;
    /**
     * Username.
     */
    public readonly username!: pulumi.Output<string>;

    /**
     * Create a DownloadClient resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DownloadClientArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DownloadClientArgs | DownloadClientState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DownloadClientState | undefined;
            resourceInputs["addPaused"] = state ? state.addPaused : undefined;
            resourceInputs["addStopped"] = state ? state.addStopped : undefined;
            resourceInputs["additionalTags"] = state ? state.additionalTags : undefined;
            resourceInputs["apiKey"] = state ? state.apiKey : undefined;
            resourceInputs["apiUrl"] = state ? state.apiUrl : undefined;
            resourceInputs["appId"] = state ? state.appId : undefined;
            resourceInputs["appToken"] = state ? state.appToken : undefined;
            resourceInputs["categories"] = state ? state.categories : undefined;
            resourceInputs["category"] = state ? state.category : undefined;
            resourceInputs["configContract"] = state ? state.configContract : undefined;
            resourceInputs["destination"] = state ? state.destination : undefined;
            resourceInputs["destinationDirectory"] = state ? state.destinationDirectory : undefined;
            resourceInputs["directory"] = state ? state.directory : undefined;
            resourceInputs["enable"] = state ? state.enable : undefined;
            resourceInputs["fieldTags"] = state ? state.fieldTags : undefined;
            resourceInputs["host"] = state ? state.host : undefined;
            resourceInputs["implementation"] = state ? state.implementation : undefined;
            resourceInputs["initialState"] = state ? state.initialState : undefined;
            resourceInputs["intialState"] = state ? state.intialState : undefined;
            resourceInputs["itemPriority"] = state ? state.itemPriority : undefined;
            resourceInputs["magnetFileExtension"] = state ? state.magnetFileExtension : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nzbFolder"] = state ? state.nzbFolder : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["postImTags"] = state ? state.postImTags : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["readOnly"] = state ? state.readOnly : undefined;
            resourceInputs["rpcPath"] = state ? state.rpcPath : undefined;
            resourceInputs["saveMagnetFiles"] = state ? state.saveMagnetFiles : undefined;
            resourceInputs["secretToken"] = state ? state.secretToken : undefined;
            resourceInputs["sequentialOrder"] = state ? state.sequentialOrder : undefined;
            resourceInputs["startOnAdd"] = state ? state.startOnAdd : undefined;
            resourceInputs["strmFolder"] = state ? state.strmFolder : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["torrentFolder"] = state ? state.torrentFolder : undefined;
            resourceInputs["tvImportedCategory"] = state ? state.tvImportedCategory : undefined;
            resourceInputs["urlBase"] = state ? state.urlBase : undefined;
            resourceInputs["useSsl"] = state ? state.useSsl : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
        } else {
            const args = argsOrState as DownloadClientArgs | undefined;
            if ((!args || args.configContract === undefined) && !opts.urn) {
                throw new Error("Missing required property 'configContract'");
            }
            if ((!args || args.implementation === undefined) && !opts.urn) {
                throw new Error("Missing required property 'implementation'");
            }
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            if ((!args || args.protocol === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protocol'");
            }
            resourceInputs["addPaused"] = args ? args.addPaused : undefined;
            resourceInputs["addStopped"] = args ? args.addStopped : undefined;
            resourceInputs["additionalTags"] = args ? args.additionalTags : undefined;
            resourceInputs["apiKey"] = args?.apiKey ? pulumi.secret(args.apiKey) : undefined;
            resourceInputs["apiUrl"] = args ? args.apiUrl : undefined;
            resourceInputs["appId"] = args ? args.appId : undefined;
            resourceInputs["appToken"] = args?.appToken ? pulumi.secret(args.appToken) : undefined;
            resourceInputs["categories"] = args ? args.categories : undefined;
            resourceInputs["category"] = args ? args.category : undefined;
            resourceInputs["configContract"] = args ? args.configContract : undefined;
            resourceInputs["destination"] = args ? args.destination : undefined;
            resourceInputs["destinationDirectory"] = args ? args.destinationDirectory : undefined;
            resourceInputs["directory"] = args ? args.directory : undefined;
            resourceInputs["enable"] = args ? args.enable : undefined;
            resourceInputs["fieldTags"] = args ? args.fieldTags : undefined;
            resourceInputs["host"] = args ? args.host : undefined;
            resourceInputs["implementation"] = args ? args.implementation : undefined;
            resourceInputs["initialState"] = args ? args.initialState : undefined;
            resourceInputs["intialState"] = args ? args.intialState : undefined;
            resourceInputs["itemPriority"] = args ? args.itemPriority : undefined;
            resourceInputs["magnetFileExtension"] = args ? args.magnetFileExtension : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nzbFolder"] = args ? args.nzbFolder : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["postImTags"] = args ? args.postImTags : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["readOnly"] = args ? args.readOnly : undefined;
            resourceInputs["rpcPath"] = args ? args.rpcPath : undefined;
            resourceInputs["saveMagnetFiles"] = args ? args.saveMagnetFiles : undefined;
            resourceInputs["secretToken"] = args?.secretToken ? pulumi.secret(args.secretToken) : undefined;
            resourceInputs["sequentialOrder"] = args ? args.sequentialOrder : undefined;
            resourceInputs["startOnAdd"] = args ? args.startOnAdd : undefined;
            resourceInputs["strmFolder"] = args ? args.strmFolder : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["torrentFolder"] = args ? args.torrentFolder : undefined;
            resourceInputs["tvImportedCategory"] = args ? args.tvImportedCategory : undefined;
            resourceInputs["urlBase"] = args ? args.urlBase : undefined;
            resourceInputs["useSsl"] = args ? args.useSsl : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["apiKey", "appToken", "password", "secretToken"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(DownloadClient.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DownloadClient resources.
 */
export interface DownloadClientState {
    /**
     * Add paused flag.
     */
    addPaused?: pulumi.Input<boolean>;
    /**
     * Add stopped flag.
     */
    addStopped?: pulumi.Input<boolean>;
    /**
     * Additional tags, `0` TitleSlug, `1` Quality, `2` Language, `3` ReleaseGroup, `4` Year, `5` Indexer, `6` Network.
     */
    additionalTags?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * API key.
     */
    apiKey?: pulumi.Input<string>;
    /**
     * API URL.
     */
    apiUrl?: pulumi.Input<string>;
    /**
     * App ID.
     */
    appId?: pulumi.Input<string>;
    /**
     * App Token.
     */
    appToken?: pulumi.Input<string>;
    /**
     * List of mapped categories.
     */
    categories?: pulumi.Input<pulumi.Input<inputs.DownloadClient.DownloadClientCategory>[]>;
    /**
     * Category.
     */
    category?: pulumi.Input<string>;
    /**
     * DownloadClient configuration template.
     */
    configContract?: pulumi.Input<string>;
    /**
     * Destination.
     */
    destination?: pulumi.Input<string>;
    /**
     * Movie directory.
     */
    destinationDirectory?: pulumi.Input<string>;
    /**
     * Directory.
     */
    directory?: pulumi.Input<string>;
    /**
     * Enable flag.
     */
    enable?: pulumi.Input<boolean>;
    /**
     * Field tags.
     */
    fieldTags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * host.
     */
    host?: pulumi.Input<string>;
    /**
     * DownloadClient implementation name.
     */
    implementation?: pulumi.Input<string>;
    /**
     * Initial state. `0` Start, `1` ForceStart, `2` Pause.
     */
    initialState?: pulumi.Input<number>;
    /**
     * Initial state, with Stop support. `0` Start, `1` ForceStart, `2` Pause, `3` Stop.
     */
    intialState?: pulumi.Input<number>;
    /**
     * Priority. `0` Last, `1` First.
     */
    itemPriority?: pulumi.Input<number>;
    /**
     * Magnet file extension.
     */
    magnetFileExtension?: pulumi.Input<string>;
    /**
     * Download Client name.
     */
    name?: pulumi.Input<string>;
    /**
     * NZB folder.
     */
    nzbFolder?: pulumi.Input<string>;
    /**
     * Password.
     */
    password?: pulumi.Input<string>;
    /**
     * Port.
     */
    port?: pulumi.Input<number>;
    /**
     * Post import tags.
     */
    postImTags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Priority.
     */
    priority?: pulumi.Input<number>;
    /**
     * Protocol. Valid values are 'usenet' and 'torrent'.
     */
    protocol?: pulumi.Input<string>;
    /**
     * Read only flag.
     */
    readOnly?: pulumi.Input<boolean>;
    /**
     * RPC path.
     */
    rpcPath?: pulumi.Input<string>;
    /**
     * Save magnet files flag.
     */
    saveMagnetFiles?: pulumi.Input<boolean>;
    /**
     * Secret token.
     */
    secretToken?: pulumi.Input<string>;
    /**
     * Sequential order flag.
     */
    sequentialOrder?: pulumi.Input<boolean>;
    /**
     * Start on add flag.
     */
    startOnAdd?: pulumi.Input<boolean>;
    /**
     * STRM folder.
     */
    strmFolder?: pulumi.Input<string>;
    /**
     * List of associated tags.
     */
    tags?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Torrent folder.
     */
    torrentFolder?: pulumi.Input<string>;
    /**
     * TV imported category.
     */
    tvImportedCategory?: pulumi.Input<string>;
    /**
     * Base URL.
     */
    urlBase?: pulumi.Input<string>;
    /**
     * Use SSL flag.
     */
    useSsl?: pulumi.Input<boolean>;
    /**
     * Username.
     */
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DownloadClient resource.
 */
export interface DownloadClientArgs {
    /**
     * Add paused flag.
     */
    addPaused?: pulumi.Input<boolean>;
    /**
     * Add stopped flag.
     */
    addStopped?: pulumi.Input<boolean>;
    /**
     * Additional tags, `0` TitleSlug, `1` Quality, `2` Language, `3` ReleaseGroup, `4` Year, `5` Indexer, `6` Network.
     */
    additionalTags?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * API key.
     */
    apiKey?: pulumi.Input<string>;
    /**
     * API URL.
     */
    apiUrl?: pulumi.Input<string>;
    /**
     * App ID.
     */
    appId?: pulumi.Input<string>;
    /**
     * App Token.
     */
    appToken?: pulumi.Input<string>;
    /**
     * List of mapped categories.
     */
    categories?: pulumi.Input<pulumi.Input<inputs.DownloadClient.DownloadClientCategory>[]>;
    /**
     * Category.
     */
    category?: pulumi.Input<string>;
    /**
     * DownloadClient configuration template.
     */
    configContract: pulumi.Input<string>;
    /**
     * Destination.
     */
    destination?: pulumi.Input<string>;
    /**
     * Movie directory.
     */
    destinationDirectory?: pulumi.Input<string>;
    /**
     * Directory.
     */
    directory?: pulumi.Input<string>;
    /**
     * Enable flag.
     */
    enable?: pulumi.Input<boolean>;
    /**
     * Field tags.
     */
    fieldTags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * host.
     */
    host?: pulumi.Input<string>;
    /**
     * DownloadClient implementation name.
     */
    implementation: pulumi.Input<string>;
    /**
     * Initial state. `0` Start, `1` ForceStart, `2` Pause.
     */
    initialState?: pulumi.Input<number>;
    /**
     * Initial state, with Stop support. `0` Start, `1` ForceStart, `2` Pause, `3` Stop.
     */
    intialState?: pulumi.Input<number>;
    /**
     * Priority. `0` Last, `1` First.
     */
    itemPriority?: pulumi.Input<number>;
    /**
     * Magnet file extension.
     */
    magnetFileExtension?: pulumi.Input<string>;
    /**
     * Download Client name.
     */
    name: pulumi.Input<string>;
    /**
     * NZB folder.
     */
    nzbFolder?: pulumi.Input<string>;
    /**
     * Password.
     */
    password?: pulumi.Input<string>;
    /**
     * Port.
     */
    port?: pulumi.Input<number>;
    /**
     * Post import tags.
     */
    postImTags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Priority.
     */
    priority?: pulumi.Input<number>;
    /**
     * Protocol. Valid values are 'usenet' and 'torrent'.
     */
    protocol: pulumi.Input<string>;
    /**
     * Read only flag.
     */
    readOnly?: pulumi.Input<boolean>;
    /**
     * RPC path.
     */
    rpcPath?: pulumi.Input<string>;
    /**
     * Save magnet files flag.
     */
    saveMagnetFiles?: pulumi.Input<boolean>;
    /**
     * Secret token.
     */
    secretToken?: pulumi.Input<string>;
    /**
     * Sequential order flag.
     */
    sequentialOrder?: pulumi.Input<boolean>;
    /**
     * Start on add flag.
     */
    startOnAdd?: pulumi.Input<boolean>;
    /**
     * STRM folder.
     */
    strmFolder?: pulumi.Input<string>;
    /**
     * List of associated tags.
     */
    tags?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Torrent folder.
     */
    torrentFolder?: pulumi.Input<string>;
    /**
     * TV imported category.
     */
    tvImportedCategory?: pulumi.Input<string>;
    /**
     * Base URL.
     */
    urlBase?: pulumi.Input<string>;
    /**
     * Use SSL flag.
     */
    useSsl?: pulumi.Input<boolean>;
    /**
     * Username.
     */
    username?: pulumi.Input<string>;
}
