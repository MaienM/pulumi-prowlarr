// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { GetNotificationArgs, GetNotificationResult, GetNotificationOutputArgs } from "./getNotification";
export const getNotification: typeof import("./getNotification").getNotification = null as any;
export const getNotificationOutput: typeof import("./getNotification").getNotificationOutput = null as any;
utilities.lazyLoad(exports, ["getNotification","getNotificationOutput"], () => require("./getNotification"));

export { GetNotificationsResult } from "./getNotifications";
export const getNotifications: typeof import("./getNotifications").getNotifications = null as any;
utilities.lazyLoad(exports, ["getNotifications"], () => require("./getNotifications"));

export { NotificationArgs, NotificationState } from "./notification";
export type Notification = import("./notification").Notification;
export const Notification: typeof import("./notification").Notification = null as any;
utilities.lazyLoad(exports, ["Notification"], () => require("./notification"));

export { NotificationAppriseArgs, NotificationAppriseState } from "./notificationApprise";
export type NotificationApprise = import("./notificationApprise").NotificationApprise;
export const NotificationApprise: typeof import("./notificationApprise").NotificationApprise = null as any;
utilities.lazyLoad(exports, ["NotificationApprise"], () => require("./notificationApprise"));

export { NotificationBoxcarArgs, NotificationBoxcarState } from "./notificationBoxcar";
export type NotificationBoxcar = import("./notificationBoxcar").NotificationBoxcar;
export const NotificationBoxcar: typeof import("./notificationBoxcar").NotificationBoxcar = null as any;
utilities.lazyLoad(exports, ["NotificationBoxcar"], () => require("./notificationBoxcar"));

export { NotificationCustomScriptArgs, NotificationCustomScriptState } from "./notificationCustomScript";
export type NotificationCustomScript = import("./notificationCustomScript").NotificationCustomScript;
export const NotificationCustomScript: typeof import("./notificationCustomScript").NotificationCustomScript = null as any;
utilities.lazyLoad(exports, ["NotificationCustomScript"], () => require("./notificationCustomScript"));

export { NotificationDiscordArgs, NotificationDiscordState } from "./notificationDiscord";
export type NotificationDiscord = import("./notificationDiscord").NotificationDiscord;
export const NotificationDiscord: typeof import("./notificationDiscord").NotificationDiscord = null as any;
utilities.lazyLoad(exports, ["NotificationDiscord"], () => require("./notificationDiscord"));

export { NotificationEmailArgs, NotificationEmailState } from "./notificationEmail";
export type NotificationEmail = import("./notificationEmail").NotificationEmail;
export const NotificationEmail: typeof import("./notificationEmail").NotificationEmail = null as any;
utilities.lazyLoad(exports, ["NotificationEmail"], () => require("./notificationEmail"));

export { NotificationGotifyArgs, NotificationGotifyState } from "./notificationGotify";
export type NotificationGotify = import("./notificationGotify").NotificationGotify;
export const NotificationGotify: typeof import("./notificationGotify").NotificationGotify = null as any;
utilities.lazyLoad(exports, ["NotificationGotify"], () => require("./notificationGotify"));

export { NotificationJoinArgs, NotificationJoinState } from "./notificationJoin";
export type NotificationJoin = import("./notificationJoin").NotificationJoin;
export const NotificationJoin: typeof import("./notificationJoin").NotificationJoin = null as any;
utilities.lazyLoad(exports, ["NotificationJoin"], () => require("./notificationJoin"));

export { NotificationMailgunArgs, NotificationMailgunState } from "./notificationMailgun";
export type NotificationMailgun = import("./notificationMailgun").NotificationMailgun;
export const NotificationMailgun: typeof import("./notificationMailgun").NotificationMailgun = null as any;
utilities.lazyLoad(exports, ["NotificationMailgun"], () => require("./notificationMailgun"));

export { NotificationNotifiarrArgs, NotificationNotifiarrState } from "./notificationNotifiarr";
export type NotificationNotifiarr = import("./notificationNotifiarr").NotificationNotifiarr;
export const NotificationNotifiarr: typeof import("./notificationNotifiarr").NotificationNotifiarr = null as any;
utilities.lazyLoad(exports, ["NotificationNotifiarr"], () => require("./notificationNotifiarr"));

export { NotificationNtfyArgs, NotificationNtfyState } from "./notificationNtfy";
export type NotificationNtfy = import("./notificationNtfy").NotificationNtfy;
export const NotificationNtfy: typeof import("./notificationNtfy").NotificationNtfy = null as any;
utilities.lazyLoad(exports, ["NotificationNtfy"], () => require("./notificationNtfy"));

export { NotificationProwlArgs, NotificationProwlState } from "./notificationProwl";
export type NotificationProwl = import("./notificationProwl").NotificationProwl;
export const NotificationProwl: typeof import("./notificationProwl").NotificationProwl = null as any;
utilities.lazyLoad(exports, ["NotificationProwl"], () => require("./notificationProwl"));

export { NotificationPushbulletArgs, NotificationPushbulletState } from "./notificationPushbullet";
export type NotificationPushbullet = import("./notificationPushbullet").NotificationPushbullet;
export const NotificationPushbullet: typeof import("./notificationPushbullet").NotificationPushbullet = null as any;
utilities.lazyLoad(exports, ["NotificationPushbullet"], () => require("./notificationPushbullet"));

export { NotificationPushoverArgs, NotificationPushoverState } from "./notificationPushover";
export type NotificationPushover = import("./notificationPushover").NotificationPushover;
export const NotificationPushover: typeof import("./notificationPushover").NotificationPushover = null as any;
utilities.lazyLoad(exports, ["NotificationPushover"], () => require("./notificationPushover"));

export { NotificationSendgridArgs, NotificationSendgridState } from "./notificationSendgrid";
export type NotificationSendgrid = import("./notificationSendgrid").NotificationSendgrid;
export const NotificationSendgrid: typeof import("./notificationSendgrid").NotificationSendgrid = null as any;
utilities.lazyLoad(exports, ["NotificationSendgrid"], () => require("./notificationSendgrid"));

export { NotificationSignalArgs, NotificationSignalState } from "./notificationSignal";
export type NotificationSignal = import("./notificationSignal").NotificationSignal;
export const NotificationSignal: typeof import("./notificationSignal").NotificationSignal = null as any;
utilities.lazyLoad(exports, ["NotificationSignal"], () => require("./notificationSignal"));

export { NotificationSimplepushArgs, NotificationSimplepushState } from "./notificationSimplepush";
export type NotificationSimplepush = import("./notificationSimplepush").NotificationSimplepush;
export const NotificationSimplepush: typeof import("./notificationSimplepush").NotificationSimplepush = null as any;
utilities.lazyLoad(exports, ["NotificationSimplepush"], () => require("./notificationSimplepush"));

export { NotificationSlackArgs, NotificationSlackState } from "./notificationSlack";
export type NotificationSlack = import("./notificationSlack").NotificationSlack;
export const NotificationSlack: typeof import("./notificationSlack").NotificationSlack = null as any;
utilities.lazyLoad(exports, ["NotificationSlack"], () => require("./notificationSlack"));

export { NotificationTelegramArgs, NotificationTelegramState } from "./notificationTelegram";
export type NotificationTelegram = import("./notificationTelegram").NotificationTelegram;
export const NotificationTelegram: typeof import("./notificationTelegram").NotificationTelegram = null as any;
utilities.lazyLoad(exports, ["NotificationTelegram"], () => require("./notificationTelegram"));

export { NotificationTwitterArgs, NotificationTwitterState } from "./notificationTwitter";
export type NotificationTwitter = import("./notificationTwitter").NotificationTwitter;
export const NotificationTwitter: typeof import("./notificationTwitter").NotificationTwitter = null as any;
utilities.lazyLoad(exports, ["NotificationTwitter"], () => require("./notificationTwitter"));

export { NotificationWebhookArgs, NotificationWebhookState } from "./notificationWebhook";
export type NotificationWebhook = import("./notificationWebhook").NotificationWebhook;
export const NotificationWebhook: typeof import("./notificationWebhook").NotificationWebhook = null as any;
utilities.lazyLoad(exports, ["NotificationWebhook"], () => require("./notificationWebhook"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "prowlarr:Notification/notification:Notification":
                return new Notification(name, <any>undefined, { urn })
            case "prowlarr:Notification/notificationApprise:NotificationApprise":
                return new NotificationApprise(name, <any>undefined, { urn })
            case "prowlarr:Notification/notificationBoxcar:NotificationBoxcar":
                return new NotificationBoxcar(name, <any>undefined, { urn })
            case "prowlarr:Notification/notificationCustomScript:NotificationCustomScript":
                return new NotificationCustomScript(name, <any>undefined, { urn })
            case "prowlarr:Notification/notificationDiscord:NotificationDiscord":
                return new NotificationDiscord(name, <any>undefined, { urn })
            case "prowlarr:Notification/notificationEmail:NotificationEmail":
                return new NotificationEmail(name, <any>undefined, { urn })
            case "prowlarr:Notification/notificationGotify:NotificationGotify":
                return new NotificationGotify(name, <any>undefined, { urn })
            case "prowlarr:Notification/notificationJoin:NotificationJoin":
                return new NotificationJoin(name, <any>undefined, { urn })
            case "prowlarr:Notification/notificationMailgun:NotificationMailgun":
                return new NotificationMailgun(name, <any>undefined, { urn })
            case "prowlarr:Notification/notificationNotifiarr:NotificationNotifiarr":
                return new NotificationNotifiarr(name, <any>undefined, { urn })
            case "prowlarr:Notification/notificationNtfy:NotificationNtfy":
                return new NotificationNtfy(name, <any>undefined, { urn })
            case "prowlarr:Notification/notificationProwl:NotificationProwl":
                return new NotificationProwl(name, <any>undefined, { urn })
            case "prowlarr:Notification/notificationPushbullet:NotificationPushbullet":
                return new NotificationPushbullet(name, <any>undefined, { urn })
            case "prowlarr:Notification/notificationPushover:NotificationPushover":
                return new NotificationPushover(name, <any>undefined, { urn })
            case "prowlarr:Notification/notificationSendgrid:NotificationSendgrid":
                return new NotificationSendgrid(name, <any>undefined, { urn })
            case "prowlarr:Notification/notificationSignal:NotificationSignal":
                return new NotificationSignal(name, <any>undefined, { urn })
            case "prowlarr:Notification/notificationSimplepush:NotificationSimplepush":
                return new NotificationSimplepush(name, <any>undefined, { urn })
            case "prowlarr:Notification/notificationSlack:NotificationSlack":
                return new NotificationSlack(name, <any>undefined, { urn })
            case "prowlarr:Notification/notificationTelegram:NotificationTelegram":
                return new NotificationTelegram(name, <any>undefined, { urn })
            case "prowlarr:Notification/notificationTwitter:NotificationTwitter":
                return new NotificationTwitter(name, <any>undefined, { urn })
            case "prowlarr:Notification/notificationWebhook:NotificationWebhook":
                return new NotificationWebhook(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("prowlarr", "Notification/notification", _module)
pulumi.runtime.registerResourceModule("prowlarr", "Notification/notificationApprise", _module)
pulumi.runtime.registerResourceModule("prowlarr", "Notification/notificationBoxcar", _module)
pulumi.runtime.registerResourceModule("prowlarr", "Notification/notificationCustomScript", _module)
pulumi.runtime.registerResourceModule("prowlarr", "Notification/notificationDiscord", _module)
pulumi.runtime.registerResourceModule("prowlarr", "Notification/notificationEmail", _module)
pulumi.runtime.registerResourceModule("prowlarr", "Notification/notificationGotify", _module)
pulumi.runtime.registerResourceModule("prowlarr", "Notification/notificationJoin", _module)
pulumi.runtime.registerResourceModule("prowlarr", "Notification/notificationMailgun", _module)
pulumi.runtime.registerResourceModule("prowlarr", "Notification/notificationNotifiarr", _module)
pulumi.runtime.registerResourceModule("prowlarr", "Notification/notificationNtfy", _module)
pulumi.runtime.registerResourceModule("prowlarr", "Notification/notificationProwl", _module)
pulumi.runtime.registerResourceModule("prowlarr", "Notification/notificationPushbullet", _module)
pulumi.runtime.registerResourceModule("prowlarr", "Notification/notificationPushover", _module)
pulumi.runtime.registerResourceModule("prowlarr", "Notification/notificationSendgrid", _module)
pulumi.runtime.registerResourceModule("prowlarr", "Notification/notificationSignal", _module)
pulumi.runtime.registerResourceModule("prowlarr", "Notification/notificationSimplepush", _module)
pulumi.runtime.registerResourceModule("prowlarr", "Notification/notificationSlack", _module)
pulumi.runtime.registerResourceModule("prowlarr", "Notification/notificationTelegram", _module)
pulumi.runtime.registerResourceModule("prowlarr", "Notification/notificationTwitter", _module)
pulumi.runtime.registerResourceModule("prowlarr", "Notification/notificationWebhook", _module)
